type UserStatus = 
 record {
   backupWallet: opt principal;
   lastPing: Time;
   owner: principal;
   timeout: nat;
   tokenBalance: nat;
 };
type TransferResult = 
 variant {
   Err: TransferError;
   Ok: nat;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferArgs = 
 record {
   amount: nat;
   created_at_time: opt nat64;
   fee: opt nat;
   from_subaccount: opt blob;
   memo: opt blob;
   to: Account;
 };
type Time = int;
type Result_1 = 
 variant {
   err: text;
   ok: UserStatus;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type MetadataValue = 
 variant {
   Blob: blob;
   Int: int;
   Nat: nat;
   Text: text;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
service : {
  claim: (principal) -> (Result);
  getAllTokenHolders: () -> (vec record {
                                   principal;
                                   nat;
                                 }) query;
  getAllUsers: () -> (vec principal) query;
  getMyStatus: () -> (Result_1);
  getMyTokenBalance: () -> (nat);
  getUserStatus: (principal) -> (Result_1) query;
  icrc1_balance_of: (Account) -> (nat) query;
  icrc1_decimals: () -> (nat8) query;
  icrc1_fee: () -> (nat) query;
  icrc1_metadata: () -> (vec record {
                               text;
                               MetadataValue;
                             }) query;
  icrc1_minting_account: () -> (opt Account) query;
  icrc1_name: () -> (text) query;
  icrc1_supported_standards: () -> (vec record {
                                          name: text;
                                          url: text;
                                        }) query;
  icrc1_symbol: () -> (text) query;
  icrc1_total_supply: () -> (nat) query;
  icrc1_transfer: (TransferArgs) -> (TransferResult);
  initializeUser: () -> (Result);
  ping: () -> (Result);
  setBackup: (principal) -> (Result);
  setTimeout: (nat) -> (Result);
  userExists: (principal) -> (bool) query;
}
